import React, { useState } from "react";
import API from "../src/api"; // Adjust path as needed
import toast from "react-hot-toast";

const CampaignCard = ({ show, onClose, onCampaignCreated }) => {
  const [formData, setFormData] = useState({
    name: "",
    audienceSegment: "",
  });
  const [loading, setLoading] = useState(false);
  const [cancelLoading, setCancelLoading] = useState(false);
  const [previewLoading, setPreviewLoading] = useState(false);
  const [audienceSize, setAudienceSize] = useState(null);
  const [inputMode, setInputMode] = useState("nlp"); // default mode manual
  const [isTitleAutoGenerated, setIsTitleAutoGenerated] = useState(false);

  const handleChange = (e) => {
    if (e.target.name === "name") {
      setIsTitleAutoGenerated(false);
    }
    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    if (e.target.name === "audienceSegment") {
      setAudienceSize(null); // reset audience size if query changes
    }
  };
  const handleInputModeChange = (e) => {
    setInputMode(e.target.value);
  };

  const handlePreview = async () => {
    let parsedQuery;

    // Start loading
    setPreviewLoading(true);

    try {
      if (inputMode === "manual") {
        if (!formData.audienceSegment) {
          toast.error("Please enter an audience segment query");
          return;
        }

        try {
          parsedQuery = JSON.parse(formData.audienceSegment);
        } catch {
          toast.error("Invalid JSON format in audience segment");
          return;
        }
      } else if (inputMode === "nlp") {
        if (!formData.nlpInput) {
          toast.error("Please enter an audience description");
          return;
        }

        try {
          const nlpRes = await API.post("/api/nlp-to-query", {
            description: formData.nlpInput,
          });

          if (nlpRes.status === 200 && nlpRes.data.query) {
            parsedQuery = nlpRes.data.query;

            setFormData((prev) => ({
              ...prev,
              audienceSegment: JSON.stringify(parsedQuery, null, 2),
              name: prev.name || nlpRes.data.title || "", // Set title if name is empty
            }));
            setIsTitleAutoGenerated(true);
            setInputMode("manual");
          } else {
            toast.error("Failed to convert NLP to query");
            return;
          }
        } catch (err) {
          console.error("NLP conversion failed:", err);
          toast.error("Error converting NLP to query");
          return;
        }
      }

      // Fetch audience size
      const res = await API.post("/api/audience-size", { query: parsedQuery });
      if (res.status === 200) {
        setAudienceSize(res.data.size);
        toast.success(`Audience size: ${res.data.size}`);
      } else {
        toast.error("Failed to fetch audience size");
      }
    } catch (error) {
      console.error("Error in handlePreview:", error);
      toast.error("Something went wrong while processing your request.");
    } finally {
      setPreviewLoading(false); // Always stop loading at the end
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!formData.name || !formData.audienceSegment) {
      toast.error("Please fill all required fields");
      return;
    }

    if (audienceSize === null) {
      toast.error("Please preview audience size before creating campaign");
      return;
    }

    if (audienceSize === 0) {
      toast.error("Audience size is zero. Cannot create campaign.");
      return;
    }

    setLoading(true);
    try {
      const payload = {
        ...formData,
        audienceSize, // âœ… include this explicitly
      };

      const res = await API.post("/api/create-campaign", payload);

      if (res.status === 201) {
        toast.success("Campaign created successfully");
        onCampaignCreated(res.data);
        onClose();
      }
    } catch (error) {
      console.error("Error creating campaign:", error);
      toast.error("Failed to create campaign");
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    setCancelLoading(true);
    setTimeout(() => {
      setCancelLoading(false);
      onClose();
    }, 400);
  };

  return (
    <div
      className={`modal fade ${show ? "show d-block" : ""}`}
      tabIndex="-1"
      role="dialog"
      style={{
        backgroundColor: "rgba(0,0,0,0.5)",
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        zIndex: 1050,
      }}
    >
      <div className="modal-dialog" role="document">
        <div className="modal-content p-3">
          <div className="modal-header">
            <h5 className="modal-title">Create Campaign</h5>
            <button
              type="button"
              className="btn-close"
              onClick={onClose}
              aria-label="Close"
            />
          </div>

          <form onSubmit={handleSubmit}>
            {isTitleAutoGenerated && (
              <small className="text-success">
                Campaign title auto-generated from audience description
              </small>
            )}
            <div className="modal-body">
              <div className="mb-3">
                <label className="form-label">Campaign Name</label>
                <input
                  type="text"
                  name="name"
                  className="form-control"
                  value={formData.name}
                  onChange={handleChange}
                  required
                  placeholder="Enter campaign name"
                />
              </div>

              {/* Select Input Mode: Manual JSON or NLP */}
              <div className="mb-3">
                <label className="form-label">
                  Audience Segment Input Mode
                </label>
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="inputMode"
                    id="inputModeManual"
                    value="manual"
                    checked={inputMode === "manual"}
                    onChange={() => setInputMode("manual")}
                  />
                  <label className="form-check-label" htmlFor="inputModeManual">
                    Manual JSON Input
                  </label>
                </div>
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="inputMode"
                    id="inputModeNLP"
                    value="nlp"
                    checked={inputMode === "nlp"}
                    onChange={() => setInputMode("nlp")}
                  />
                  <label className="form-check-label" htmlFor="inputModeNLP">
                    AI NLP Input
                  </label>
                </div>
              </div>

              {/* Manual JSON textarea */}
              {inputMode === "manual" && (
                <div className="mb-3">
                  <label className="form-label">Audience Segment (JSON)</label>
                  <textarea
                    name="audienceSegment"
                    className="form-control"
                    value={formData.audienceSegment}
                    onChange={handleChange}
                    rows={4}
                    placeholder='E.g. {"total_spent": {"$gt": 1000}}'
                    required
                  />
                  <small className="text-muted">
                    Enter MongoDB query as JSON string
                  </small>
                </div>
              )}

              {/* NLP input text */}
              {inputMode === "nlp" && (
                <div className="mb-3">
                  <label className="form-label">
                    Describe Audience Segment (NLP)
                  </label>
                  <input
                    type="text"
                    name="nlpInput"
                    className="form-control"
                    value={formData.nlpInput || ""}
                    onChange={(e) =>
                      setFormData((prev) => ({
                        ...prev,
                        nlpInput: e.target.value,
                      }))
                    }
                    placeholder="E.g. Customers who spent more than 1000 and are active"
                    required
                  />
                  <small className="text-muted">
                    Describe your audience in natural language. AI will convert
                    this to a query.
                  </small>
                </div>
              )}

              {/* Preview Audience Size Button */}
              <div className="mb-3">
                <button
                  type="button"
                  className="btn btn-info"
                  onClick={handlePreview}
                  disabled={previewLoading}
                >
                  {previewLoading ? (
                    <span>
                      <span
                        className="spinner-border spinner-border-sm me-2"
                        role="status"
                        aria-hidden="true"
                      ></span>
                      Checking...
                    </span>
                  ) : (
                    "Preview Audience Size"
                  )}
                </button>

                {audienceSize !== null && (
                  <div className="mt-2">
                    <strong>Audience Size:</strong> {audienceSize}
                  </div>
                )}
              </div>
            </div>
            <div className="modal-footer">
              <button
                type="button"
                className="btn btn-secondary"
                onClick={handleCancel}
                disabled={cancelLoading}
              >
                {cancelLoading ? (
                  <span>
                    <span
                      className="spinner-border spinner-border-sm me-2"
                      role="status"
                      aria-hidden="true"
                    ></span>
                    Cancelling...
                  </span>
                ) : (
                  "Cancel"
                )}
              </button>
              <button
                type="submit"
                className="btn btn-primary"
                disabled={
                  loading || audienceSize === 0 || audienceSize === null
                }
                title={
                  audienceSize === 0
                    ? "Audience size is zero"
                    : audienceSize === null
                    ? "Please preview audience size first"
                    : ""
                }
              >
                {loading ? (
                  <span>
                    <span
                      className="spinner-border spinner-border-sm me-2"
                      role="status"
                      aria-hidden="true"
                    ></span>
                    Creating...
                  </span>
                ) : (
                  "Create Campaign"
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default CampaignCard;
